// Box Model
$button--height: $form--height !default;
$button--py: rem(15) !default;
$button--px: rem(25) !default;
// Typography
$button--color: $white !default;
$button--family: $family-default !default;
$button--font-weight: $weight-bold !default;
// Visual
$button--background: $primary !default;
$button--border-color: $button--background !default;
$button--border-width: 2px !default;
$button--border-radius: $border-radius !default;
$button--shadow-hover-width: rem(1);
$button--shadow-focus-width: $form--focus-width !default;
// Animation
$button--transition: all 0.2s ease-in-out !default;


// Function 
@function box-shadow-flat($size, $color, $size2, $color2) {
  $result: 0 0 0 $size $color, 0 0 0 $size2 $color2;

  @if $size2 and $color2 {
    $result: 0 0 0 $size $color, 0 0 0 $size2 $color2;
  }

  @return $result;
}

// Mixin to Overhide button
@mixin button-overhide($color: $black, $background: transparent, $colorHover: $black, $backgroundHover: transparent,) {
  color: $color;

  background: $background;

  .icon-svg .fill {
    fill: $color;
  }
 
  &:focus {
    @if $background == transparent {
      box-shadow: box-shadow-flat(0, $colorHover, $button--shadow-focus-width, rgba($colorHover, $form--focus-rgba));

      &:hover {
        box-shadow: box-shadow-flat($button--shadow-hover-width, $colorHover, $button--shadow-focus-width, rgba($colorHover, $form--focus-rgba));
      }
    }

    @else {
      box-shadow: box-shadow-flat(0, $backgroundHover, $button--shadow-focus-width, rgba($backgroundHover, $form--focus-rgba));

      &:hover {
        box-shadow: box-shadow-flat($button--shadow-hover-width, $backgroundHover, $button--shadow-focus-width, rgba($backgroundHover, $form--focus-rgba));
      }
    }
  }

  &:hover,
  &:focus {
    color: $colorHover;

    background: $backgroundHover;

    @if $background==transparent {
      border-color: $colorHover;

      &:not(:focus) {
        box-shadow: box-shadow-flat($button--shadow-hover-width, $colorHover, $button--shadow-hover-width, $backgroundHover);
      }
    }

    @else {
      border-color: $backgroundHover;

      &:not(:focus) {
        box-shadow: box-shadow-flat($button--shadow-hover-width, $backgroundHover, $button--shadow-hover-width, $backgroundHover);
      }
    }
  }

  @if $background==transparent {
    border-color: $color;
  }

  @else {
    border-color: $background; 
  }
}

// The button sizes use mixins so they can be used at different breakpoints
.button,
%button { 
 
  @extend %control; 
  @extend %unselectable;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: $button--height;
  padding: $button--py $button--px;

  color: $button--color;
  font-weight: $button--font-weight;
  font-family: $button--family;
  white-space: nowrap;
  text-align: center;

  background-color: $button--background;
  border: $button--border-width solid $button--border-color;
  border-radius: $button--border-radius;
  cursor: pointer;

  transition: $button--transition;
 
  strong { 
    color: inherit; 
  } 

  .icon-svg {  
    &:not(:first-child) {
      margin-right: rem(-4);
      margin-left: rem(6);
    }

    &:not(:last-child) {
      margin-right: rem(6);
      margin-left: rem(-4);
    }

    .fill {
      // fill: findColorInvert($button--background);
      fill: $button--color; 
    }
  }

  &:focus {
    box-shadow: 0 0 0 0 darken($button--background, 5%), 0 0 0 $button--shadow-focus-width rgba($button--background, $form--focus-rgba);

    &:hover {
      box-shadow: 0 0 0 rem(1) darken($button--background, 5%), 0 0 0 $button--shadow-focus-width rgba($button--background, $form--focus-rgba);
    }
  }
    
  &:hover {
    // color: findColorInvert($button--background);

    color: $button--color;
    text-decoration: none;

    background: darken($button--background, 5%);
    border-color: darken($button--background, 5%);
    box-shadow: 0 0 0 rem(1) darken($button--background, 5%);
  }

  &[disabled],
  fieldset[disabled] & {

    @include button-overhide($white, $grey-lighter);
    pointer-events: none;
  }

  &.has-link {

    color: $black;
    text-decoration: underline;

    background-color: transparent;
    border-color: transparent;
    box-shadow: none;

    &:hover,
    &:focus,
    &:focus:hover {
      text-decoration: none;

      box-shadow: none;
    }
  }

  &.is-fullwidth {
    width: 100%;
  }

  &.is-loading {
    color: transparent !important;

    pointer-events: none;

    &::after {

      @extend %loader;
      @include center(1em);
      position: absolute !important;
    }
  }

  &.is-outlined {
    @include button-overhide($button--background, transparent, $button--background, transparent);
  }
}
$buttons--gutter-x: rem(4);
$buttons--gutter-y: rem(8);

.buttons {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;

  .button {
    margin-bottom: $buttons--gutter-y;

    &:not(:last-child):not(.is-fullwidth) {
      @include ltr-property('margin', #{$buttons--gutter-x});
    }
  }

  &.is-centered {
    justify-content: center;

    &:not(.has-addons) {
      .button:not(.is-fullwidth) {
        margin-right: $buttons--gutter-x;
        margin-left: $buttons--gutter-x;
      }
    }
  }

  &.is-right {
    justify-content: flex-end;
  }
} 
