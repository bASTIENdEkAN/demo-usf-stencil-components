$button--height: $form--height;
$button--radius: $radius;
$button--transition: all .2s ease-in-out;

$button--color: $white !default;
$button--background: $primary !default;
$button--family: false !default;

$button--border-color: $button--background !default;
$button--border-width: $control-border-width !default;

$button--py: rem(15) !default;
$button--px: rem(25) !default;

$button--hover-color: $link-hover !default;
$button--hover-border-color: $link-hover-border !default;

$button--focus-size: rem(4);

// Function 
@function boxShadowFlat($size,$color,$size2,$color2) {
  $result: 0 0 0 $size $color, 0 0 0 $size2 $color2;
  @if $size2 and $color2 {
    $result: 0 0 0 $size $color, 0 0 0 $size2 $color2;
  } 
  @return $result;
}
// Mixin to Overhide button
@mixin buttonOverhide(
  $color: $black,
  $background: transparent,
  $colorHover: $black,
  $backgroundHover: transparent,
){
  color: $color;
  background: $background;
  @if $background == transparent {
    border-color: $color;
  } @else {
    border-color: $background;
  }
  .icon-svg .fill{
    fill: $color;
  }
  &:focus{
    $button--focus-rgba-trans: .2;
    @if $background == transparent {
      box-shadow: boxShadowFlat(0,$colorHover,$button--focus-size,rgba($colorHover, $button--focus-rgba-trans));
      &:hover{
        box-shadow: boxShadowFlat(rem(1),$colorHover,$button--focus-size,rgba($colorHover, $button--focus-rgba-trans));
      }
    } @else {
      box-shadow: boxShadowFlat(0,$backgroundHover,$button--focus-size,rgba($backgroundHover, $button--focus-rgba-trans));
      &:hover{
        box-shadow: boxShadowFlat(rem(1),$backgroundHover,$button--focus-size,rgba($backgroundHover, $button--focus-rgba-trans));
      }
    }
  }
  &:hover{
    color: $colorHover;
    background: $backgroundHover;
    @if $background == transparent {
      border-color: $colorHover;
      box-shadow:  boxShadowFlat(rem(1), $colorHover, rem(1), $backgroundHover);
    } @else {
      border-color: $backgroundHover;
      box-shadow: boxShadowFlat(rem(1), $backgroundHover, rem(1), $backgroundHover);
    }
  }
}
// The button sizes use mixins so they can be used at different breakpoints
.button,
%button {
  @extend %control;
  @extend %unselectable;
  height: $button--height;
  border-radius: $button--radius; 
  border: $button--border-width solid $button--border-color;
  font-weight: $fw-bold;
  cursor: pointer;
  font-family: $font-default;
  background-color: $button--background;
  // color: findColorInvert($button--background);
  color: $button--color;
  padding: $button--py $button--px;
  
  display: inline-flex; 
  justify-content: center;
  align-items: center;
  text-align: center;
  white-space: nowrap;
  transition: $button--transition;
  strong {
    color: inherit;
  }

  .icon-svg{
    &:not(:first-child){
        margin-left: rem(6);
        margin-right: rem(-4);
    }
    &:not(:last-child){
        margin-right: rem(6);
        margin-left: rem(-4);
    }
    .fill{
        // fill: findColorInvert($button--background);
        fill: $button--color;
    }
  }
  
  &:focus{
    box-shadow: 0 0 0 0 darken($button--background, 5%), 0 0 0 $button--focus-size rgba($button--background, .2);
    &:hover{
      box-shadow: 0 0 0 rem(1) darken($button--background, 5%), 0 0 0 $button--focus-size rgba($button--background, .2);
    }
  }
  &:hover{
    text-decoration: none;
    background: darken($button--background, 5%);
    border-color: darken($button--background, 5%);
    // color: findColorInvert($button--background);
    color: $button--color;
    box-shadow: 0 0 0 rem(1) darken($button--background, 5%);
  }


  &[disabled],
  fieldset[disabled] & {
    pointer-events: none;
    @include buttonOverhide($white,$grey-lighter);
  }
  &.has-link{
      color: $black;
      text-decoration: underline;
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;
      &:hover, &:focus, &:focus:hover{
        text-decoration: none;
        box-shadow: none;
      }
  }
  &.is-fullwidth {
    width: 100%;
  }
  &.is-loading {
    color: transparent !important;
    pointer-events: none;
    &::after {
      @extend %loader;
      @include center(1em);
      position: absolute !important;
    }
  }
  &.is-outlined{
    @include buttonOverhide($button--background,transparent,$button--background,transparent)
  }
}

$buttons--gutter-x: rem(4);
$buttons--gutter-y: rem(8);
.buttons {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  .button {
    margin-bottom: $buttons--gutter-y;
    &:not(:last-child):not(.is-fullwidth) {
      @include ltr-property("margin", #{$buttons--gutter-x});
    }
  }
  
  &.is-centered {
    justify-content: center;
    &:not(.has-addons) {
      .button:not(.is-fullwidth) {
        margin-left: $buttons--gutter-x;
        margin-right: $buttons--gutter-x;
      }
    }
  }
  &.is-right {
      justify-content: flex-end;
  }
}