
// BOX SIZING
@mixin box-sizing($property: border-box) {
    box-sizing: $property;
    box-sizing: $property;
    box-sizing: $property;
}
// MEDIA QUERIES
$breakpoints: (
    'xs': 375,
    'sm': 640,
    'md': 768,
    'lg': 1024,
    'xl': 1280,
    '2xl': 1536,
    '3xl': 1920,
) !default;

@mixin mq($type, $value) {
    $size: map-get($breakpoints, $value);

    @if $size {
        @if $type == 'min' {
            @media screen and (min-width: $size + 'px') {
                @content;
            }
        } @else if $type == 'max' {
            @media screen and (max-width: $size - 1 + 'px') {
                @content;
            }
        } @else {
            @warn 'Unknown `#{$type}` in media mixin.';
        }
    } @else {
        @error '`#{$size}` does not exist in the $breakpoints map';
    }
}

@mixin coarse-pointer() {
    @media (pointer: coarse) {
        @content;
    }
}

@mixin hover() {
    @media (hover: hover) {
        &:hover {
            @content;
        }
    }
}


// BACKGROUND @2x
@mixin background-2x($path, $ext: 'png', $w: auto, $pos: left top, $repeat: no-repeat) {

    $at1x_path: '#{$path}.#{$ext}';
    $at2x_path: '#{$path}@2x.#{$ext}';

    background-image: url('#{$at1x_path}');
    background-repeat: $repeat;
    background-position: $pos;
    background-size: $w;

    @media all and (minpixel-ratio : 1.5),
        all and (minpixel-ratio: 3/2),
        all and (min-device-pixel-ratio: 1.5),
        all and (min-device-pixel-ratio: 1.5) {
        background-image: url('#{$at2x_path}');
        background-repeat: $repeat;
        background-position: $pos;
        background-size: $w;
    } 
}

// TRIANGLE
@mixin triangle($dir, $color, $width, $height) {
    width: 0;
    height: 0;

    border-style: solid;
    @if $dir == top {
        border-width: 0 $width $height $width;
        border-color: transparent transparent $color transparent;

    }@else if $dir == bottom {
        border-width: $height $width 0 $width;
        border-color: $color transparent transparent transparent;
    }
    @else if $dir == left {
        border-width: $height $width $height 0;
        border-color: transparent $color transparent transparent;
    }
    @else if $dir == right {
        border-width: $height 0 $height $width;
        border-color: transparent transparent transparent $color;
    }
}

@mixin square($size) {
    flex-shrink: 0;
    width: rem($size);
    height: rem($size);
}


// BACKGROUND GRADIENT
// https://robots.thoughtbot.com/controlling-color-with-sass-color-functions
// https://glennmccomb.com/articles/creating-smooth-sequential-animations-with-sass/
@mixin bg-gradient($directionTo: top, $colorStart: black, $colorEnd: white , $upTo: 100%) {
    background: linear-gradient(to $directionTo, $colorStart 0%, $colorEnd $upTo);
}

// ELLIPSIS
@mixin ellipsis() {
    width: 100%;
    overflow: hidden;

    white-space: nowrap;
    text-overflow: ellipsis;
}

// FIT
@mixin fit() {
    position: absolute;
    top: 0;
    left: 0;

    width: 100%;
    height: 100%;
}

@mixin objectfit() {
    @include fit();
    object-fit: cover;
    object-position: center;
}

// CROSS PLUS BACK
@mixin icon-tricks(
    $size: rem(30),
    $background: transparent,
    $background-hover: rgba(black, 0.05),
    $border-size: 1px,
    $border-color: rgba(black, 0.1),
    $border-radius: 50%,
    $line-width: 50%,
    $line-height: 1px,
    $line-background: black,
    $dir: cross,
) {
    position: relative;

    display: block;
    width: $size;
    height: $size;
    margin: 0;
    padding: 0;
    overflow: hidden;

    text-indent: -999999px;

    background: $background;
    border: $border-size solid $border-color;
    border-radius: $border-radius;
    cursor: pointer;

    transition: all 0.2s ease;

    &::before,
    &::after {
        position: absolute;
        top: 50%;
        left: 50%;

        width: $line-width;
        height: $line-height;

        background: $line-background;

        content: '';
    }

    &::before {
        @if $dir == cross {
            transform: translate3d(-50%, -50%, 0) rotate(45deg);
        }@else if $dir == plus {
            transform: translate3d(-50%, -50%, 0) rotate(0deg);
        }@else if $dir == back or $dir == down {
            display: none;
        }
    }

    &::after {
        @if $dir == cross {
            transform: translate3d(-50%, -50%, 0) rotate(-45deg);
        }@else if $dir == plus {
            transform: translate3d(-50%, -50%, 0) rotate(-90deg);
        }@else if $dir == back or $dir == down {
            transform: translate3d(-30%, -50%, 0) rotate(-45deg);

            width: $line-width;
            height: $line-width;

            background: transparent;
            border-top: $line-height solid $line-background;
            border-left: $line-height solid $line-background;
            @if $dir == down {
                transform: translate3d(-50%, -70%, 0) rotate(-135deg);
            }
        }
    }

    &:hover {
        background: $background-hover;
    }
}
// Medium mixin :
// https://medium.com/@justinbrazeau/10-useful-sass-mixins-for-automation-833cdee9d69b
// Define vertical, horizontal, or both position
@mixin centeriser($position) {
    position: absolute;
    @if $position == 'vertical' {
        top: 50%;

        transform: translate3d(0, -50%, 0);
    }
    @else if $position == 'horizontal' {
        left: 50%;

        transform: translate3d(-50%, 0, 0);
    }
    @else if $position == 'both' {
        top: 50%;
        left: 50%;

        transform: translate3d(-50%, -50%, 0);
    }
}

// Engage mixin :
// https://engageinteractive.co.uk/blog/top-10-scss-mixins
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    position: $pos;

    display: $display;

    content: $content;
}
// http://qatsi.eu/calcul.ratio.image.php
@mixin responsive-ratio($x,$y, $pseudo: true) {
    $padding: unquote(( $y / $x ) * 100 + '%');
    @if $pseudo {
        &::before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}
// Bulma mixins
@mixin placeholder {
    $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input';
    @each $placeholder in $placeholders {
        &:#{$placeholder}-placeholder {
            @content;
        }
    }
}
// Responsiveness
@mixin ltr-property($property, $spacing, $right: true) {
    $normal: if($right, 'right', 'left');
    $opposite: if($right, 'left', 'right');
    #{$property}-#{$normal}: $spacing;
}
@mixin ltr-position($spacing, $right: true) {
    $normal: if($right, 'right', 'left');
    $opposite: if($right, 'left', 'right');
    #{$normal}: $spacing;
}

// Placeholder
@mixin overflow-touch {
    -webkit-overflow-scrolling: touch;
}

@mixin arrow($color: transparent) {
    position: absolute;
    top: 50%;

    display: block;
    width: 0.625em;
    height: 0.625em;
    margin-top: -0.4375em;

    border: 3px solid $color;
    border-top: 0;
    border-right: 0;
    border-radius: 2px;
    transform: rotate(-45deg);
    transform-origin: center;

    content: ' ';
    pointer-events: none;
}


@mixin loading($color: #ccc) {
    position: relative;

    display: block;
    width: 1em;
    height: 1em;

    border: 2px solid $color;
    border-top-color: transparent;
    border-right-color: transparent;
    border-radius: 99999px;

    animation: spinAround 500ms infinite linear;

    content: '';
}

@mixin center($width, $height: 0) {
    position: absolute;
    @if $height != 0 {
        left: calc(50% - (#{$width} * 0.5));
        top: calc(50% - (#{$height} * 0.5));
    }  @else {
        left: calc(50% - (#{$width} * 0.5));
        top: calc(50% - (#{$width} * 0.5));
    }
}

@mixin not-last-mb($spacing: var(--not-last-mb, rem(24))) {
    &:not(:last-child) {
        margin-bottom: $spacing;
    }
}

%loading {
    @include loading;
}

%not-last-mb {
    @include not-last-mb;
}


