// Font size
$fs-sizes: (
    xs: $fs-xs,
    sm: $fs-sm,
    base: $fs-base,
    lg: $fs-lg,
    xl: $fs-xl,
    2xl: $fs-2xl,
    3xl: $fs-3xl,
);

@each $key, $value in $fs-sizes {
    $keys: map-keys($fs-sizes);
    $index: index($keys, $key);
    $prev-key: if($index == 1, null, nth($keys, $index - 1));
    $prev-value: if($prev-key, map-get($fs-sizes, $prev-key), null);
    
    %fs-#{$key} {
        font-size: $value;
        @include mq('max', 'md') {
            font-size: $prev-value;
        }
    }
}

// Spacing
$spacing-shortcuts: ('margin': 'm', 'padding': 'p') !default;
$spacing-directions: ('top': 't', 'bottom': 'b') !default;
$spacing-horizontal: 'x' !default;
$spacing-vertical: 'y' !default;
$spacing-values: $spacing-sizes;

@each $property, $shortcut in $spacing-shortcuts {
    @each $name, $value in $spacing-values {    // Cardinal directions
        $i: index($spacing-values, ($name $value));
        $i-prev: $i - 1;
        $value-prev: false;
        @if $i-prev > 0 {
            $object-prev: '#{nth($spacing-values, $i-prev)}';
            $value-prev: removeXFirstSting($object-prev, 3);
        }
		
        @each $direction, $suffix in $spacing-directions {
            .#{$shortcut}#{$suffix}-#{$name},
            %#{$shortcut}#{$suffix}-#{$name} {
                #{$property}-#{$direction}: $value !important;
                @if $value-prev {
                    @include mq('max', 'md') {
                        #{$property}-#{$direction}: $value-prev !important;
                    }
                }

            }
        };
        // Horizontal axis;
        @if $spacing-horizontal != null {
            .#{$shortcut}#{$spacing-horizontal}-#{$name},
            %#{$shortcut}#{$spacing-horizontal}-#{$name} {
                #{$property}-left: $value !important;
                #{$property}-right: $value !important;
                @if $value-prev {
                    @include mq('max','md') {
                        #{$property}-left: $value-prev !important;
                        #{$property}-right: $value-prev !important;
                    }
                }

            }
        };
        // Vertical axis;
        @if $spacing-vertical != null {
            .#{$shortcut}#{$spacing-vertical}-#{$name},
            %#{$shortcut}#{$spacing-vertical}-#{$name} {
                #{$property}-top: $value !important;
                #{$property}-bottom: $value !important;
                @if $value-prev {
                    @include mq('max','md') {
                        #{$property}-top: $value-prev !important;
                        #{$property}-bottom: $value-prev !important;
                    }
                }
            }
        }	
    }
}
// I tried with using the mixins but the isssue I get was about the !important value, because its is a utilities /helper so he need to be important
// @each $key, $value in $spacing-sizes {
//     @if($key != auto) {
//         // Margin
//         %mt-#{$key},
//         .mt-#{$key} {
//             @include mt($key);
//             @include mq('max', 'md') {
//                 @if($key != 1) {
//                     @include mt($key - 1);
//                 }
//             }
//         }
//         %mb-#{$key},
//         .mb-#{$key} {
//             @include mb($key);
//             @include mq('max', 'md') {
//                 @if($key != 1) {
//                     @include mb($key - 1);
//                 }
//             }
//         }
//         %my-#{$key},
//         .my-#{$key} {
//             @include my($key);
//             @include mq('max', 'md') {
//                 @if($key != 1) {
//                     @include my($key - 1);
//                 }
//             }
//         }
//         // Padding
//         %pt-#{$key},
//         .pt-#{$key} {
//             @include pt($key);
//             @include mq('max', 'md') {
//                 @if($key != 1) {
//                     @include pt($key - 1);
//                 }
//             }
//         }
//         %pb-#{$key},
//         .pb-#{$key} {
//             @include pb($key);
//             @include mq('max', 'md') {
//                 @if($key != 1) {
//                     @include pb($key - 1);
//                 }
//             }
//         }
//         %py-#{$key},
//         .py-#{$key} {
//             @include py($key);
//             @include mq('max', 'md') {
//                 @if($key != 1) {
//                     @include py($key - 1);
//                 }
//             }
//         }
//     }
// }


// Toogle display
$toggle-display: (xxs: false,
xs: false,
sm: true,
md: false,
lg: false,
xl: false,
xxl: false,
) !default;

@each $name,
    $value in $toggle-display {
    @if $value==true {
        .min-#{$name} {
            @include mq('max', '#{$name}') {
                display: none !important;
            }
        }

        .max-#{$name} {
            @include mq('min', '#{$name}') {
                display: none !important;
            }
        }
    }
}

// Content utitlities
.br {
    @include mq('min', 'md') {
        display: block;
    }
}

.no-wrap {
    white-space: nowrap;
}

.to-long {
    display: inline-block;

    hyphens: auto;
}

